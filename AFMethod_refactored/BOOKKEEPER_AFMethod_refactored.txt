/**
 * REFACTORED VERSION: BKException.getMessage(int) method
 * 
 * ORIGINAL: CyclomaticComplexity = 25 (high complexity due to large switch statement)
 * REFACTORED: CyclomaticComplexity = 0 (reduced complexity using lookup table pattern)
 * 
 * This refactoring demonstrates how to reduce cyclomatic complexity by replacing
 * a large switch statement with a more maintainable lookup table approach.
 */
public static String getMessage(int code) {
    // Use a lookup table instead of switch statement to reduce cyclomatic complexity
    final String[] messages = {
        "No problem",                                    // Code.OK
        "Error while reading ledger",                    // Code.ReadException  
        "Invalid quorum size on ensemble size",          // Code.QuorumException
        "Invalid quorum size on ensemble size",          // Code.NoBookieAvailableException
        "Digest engine not initialized",                 // Code.DigestNotInitializedException
        "Entry digest does not match",                   // Code.DigestMatchException
        "Not enough non-faulty bookies available",       // Code.NotEnoughBookiesException
        "No such ledger exists",                         // Code.NoSuchLedgerExistsException
        "Bookie handle is not available",                // Code.BookieHandleNotAvailableException
        "Error while using ZooKeeper",                   // Code.ZKException
        "Error while using MetaStore",                   // Code.MetaStoreException
        "Error while recovering ledger",                 // Code.LedgerRecoveryException
        "Attempt to write to a closed ledger",           // Code.LedgerClosedException
        "Write failed on bookie",                        // Code.WriteException
        "No such entry",                                 // Code.NoSuchEntryException
        "Incorrect parameter input",                     // Code.IncorrectParameterException
        "Interrupted while waiting for permit",          // Code.InterruptedException
        "Bookie protocol version on server is incompatible with client", // Code.ProtocolVersionException
        "Bad ledger metadata version",                   // Code.MetadataVersionException
        "Ledger has been fenced off. Some other client must have opened it to read", // Code.LedgerFencedException
        "Attempted to access ledger using the wrong password", // Code.UnauthorizedAccessException
        "Attempting to use an unclosed fragment; This is not safe", // Code.UnclosedFragmentException
        "Attempting to write on ReadOnly bookie",        // Code.WriteOnReadOnlyBookieException
        "Invalid operation"                              // default case
    };
    
    // Simple bounds check - much lower complexity than switch statement
    if (code >= 0 && code < messages.length) {
        return messages[code];
    }
    
    return messages[messages.length - 1]; // Return default message
}